
/**
  * The Hack CPU (Central Processing unit), consisting of an ALU,
  * two registers named A and D, and a program counter named PC.
  * The CPU is designed to fetch and execute instructions written in 
  * the Hack machine language. In particular, functions as follows:
  * Executes the inputted instruction according to the Hack machine 
  * language specification. The D and A in the language specification
  * refer to CPU-resident registers, while M refers to the external
  * memory location addressed by A, i.e. to Memory[A]. The inM input 
  * holds the value of this location. If the current instruction needs 
  * to write a value to M, the value is placed in outM, the address 
  * of the target location is placed in the addressM output, and the 
  * writeM control bit is asserted. (When writeM==0, any value may 
  * appear in outM). The outM and writeM outputs are combinational: 
  * they are affected instantaneously by the execution of the current 
  * instruction. The addressM and pc outputs are clocked: although they 
  * are affected by the execution of the current instruction, they commit 
  * to their new values only in the next time step. If reset==1 then the 
  * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
  * than to the address resulting from executing the current instruction. 
  */

CHIP CPU 
{
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // AReg input Mux
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=Ain);

    // ARegister
        // loadAReg
        Not(in=instruction[15], out=a);
        Or(a=a, b=instruction[5], out=loadAReg); 
    ARegister(in=Ain, load=loadAReg, out=ARegout, out[0..14]=addressM);

    // DRegister
        // loadDReg
        And(a=instruction[15], b=instruction[4], out=loadDReg);
    DRegister(in=outALU, load=loadDReg, out=DRegOut);

    // ALU Instruction input Mux
    Mux16(a = ARegout, b = inM, sel = instruction[12], out=ALUin);

    // The ALU
    ALU(x = DRegOut, y = ALUin, zx = instruction[11], nx = instruction[10], zy = instruction[9],
        ny = instruction[8],f = instruction[7], no = instruction[6], out = outALU, out = outM, zr = zr, ng = ng);
    
    // writeM output
    And(a = instruction[3], b = instruction[15], out = writeM);

    // Instructor selector
        // JLT case
        And(a = instruction[15], b = instruction[2], out = j1);

        // JEQ case
        And(a = instruction[15], b = instruction[1], out = j2);
        
        // JGT case
        And(a = instruction[15], b = instruction[0], out = j3);

        // Check if the number is positive
        Not(in = zr, out = notzr); // not zero
        Not(in = ng, out = notng); // not negative
        And(a  = notzr, b = notng, out = positive); // positive

        And(a = j1, b = ng, out = j4);
        And(a = j2, b = zr, out = j5);
        And(a = j3, b = positive, out = j6);

        Or(a = j4, b = j5, out = state1);
        Or(a = j6, b = state1, out = loadPC);

    // The PC
    PC(in = ARegout, reset = reset, load = loadPC, inc = true, out[0..14] = pc); // inc is always 1
}

